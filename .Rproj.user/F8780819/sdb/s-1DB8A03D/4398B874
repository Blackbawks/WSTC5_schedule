{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\n\nlibrary(shiny)\nlibrary(xtable)\nlibrary(readxl)\nlibrary(dplyr)\n#library(stringr)\n#library(data.table)\n\nX <- readRDS(\"WSTC4Abstracts.rds\")\nY <- readRDS(\"WSTC4Overview.rds\")\n\n\nYyrs <- rep(2018,nrow(Y))\nYmns <- rep(4,nrow(Y))\nYdys <- sapply(1:nrow(Y),function(x) as.numeric(strsplit(as.character(Y$Date[x]),' ')[[1]][2]))\nYsthrs <- sapply(1:nrow(Y),function(x) as.numeric(strsplit(as.character(Y$Start[x]),':')[[1]][1]))\nYstmins <- sapply(1:nrow(Y),function(x) as.numeric(strsplit(as.character(Y$Start[x]),':')[[1]][2]))\nYenhrs <- sapply(1:nrow(Y),function(x) as.numeric(strsplit(as.character(Y$End[x]),':')[[1]][1]))\nYenmins <- sapply(1:nrow(Y),function(x) as.numeric(strsplit(as.character(Y$End[x]),':')[[1]][2]))\nYsecs <- rep(0,nrow(Y))\n\nY$StartGMT <- ISOdate(Yyrs,Ymns,Ydys,Ysthrs,Ystmins,Ysecs)\nY$EndGMT <- ISOdate(Yyrs,Ymns,Ydys,Yenhrs,Yenmins,Ysecs)\nY$Start <- paste(Y$Date, Y$Start,sep=', ')\nY$End <- paste(Y$Date, Y$End,sep=', ')\n\n#X <- enc2utf8(X)\n\nX$ids <- paste(as.character(X$Last),', ',as.character(X$First),sep='')\nX$Affiliation <- as.character(X$Affiliation)\nX$Country <- as.character(X$Country)\nX$First <- as.character(X$First)\nX$Last <- as.character(X$Last)\nX$Title <- as.character(X$Title)\nX$Abstract <- as.character(X$Abstract)\nX$Session <- as.character(X$Session)\nX$Date <- as.character(X$Date)\n\n\nX$Date[which(X$Date == '17-Apr')] <- 'April 17'\nX$Date[which(X$Date == '18-Apr')] <- 'April 18'\nX$Date[which(X$Date == '19-Apr')] <- 'April 19'\n\nyrs <- rep(2018,nrow(X))\nmns <- rep(4,nrow(X))\ndys <- sapply(1:nrow(X),function(x) as.numeric(strsplit(as.character(X$Date[x]),' ')[[1]][2]))\nhrs <- sapply(1:nrow(X),function(x) as.numeric(strsplit(as.character(X$Time[x]),':')[[1]][1]))\nmins <- sapply(1:nrow(X),function(x) as.numeric(strsplit(as.character(X$Time[x]),':')[[1]][2]))\nsecs <- rep(0,nrow(X))\n\nX$GMTTime <- ISOdate(yrs,mns,dys,hrs,mins,secs)\nX$fullname <- paste(X$First, X$Last, sep=\" \")\n\n\n\n\nshinyServer(function(input, output, session) {\n\n  \n  observeEvent(input$filter, {\n    if(input$filter == 'Country'){\n      shinyjs::enable('Country')\n      shinyjs::disable('Affiliation')\n      shinyjs::disable('Session')\n      shinyjs::disable('Keyword')\n      \n    }else if(input$filter == 'Affiliation'){\n      shinyjs::enable('Affiliation')\n      shinyjs::disable('Country')\n      shinyjs::disable('Session')\n      shinyjs::disable('Keyword')\n      \n    }else if(input$filter == 'Session'){\n      shinyjs::enable('Session')\n      shinyjs::disable('Country')\n      shinyjs::disable(\"Affiliation\")\n      shinyjs::disable('Keyword')\n      \n    }else if(input$filter == 'Keyword'){\n      shinyjs::enable('Keyword')\n      shinyjs::disable('Country')\n      shinyjs::disable(\"Affiliation\")\n      shinyjs::disable('Session')\n      \n    }else if(input$filter == 'Plenaries'){\n      shinyjs::disable('Session')\n      shinyjs::disable('Country')\n      shinyjs::disable(\"Affiliation\")\n      shinyjs::disable(\"Keyword\")\n      \n    }else if(input$filter == 'Show all'){\n      shinyjs::disable(\"Country\")\n      shinyjs::disable(\"Affiliation\")\n      shinyjs::disable(\"Session\")\n      shinyjs::disable(\"Keyword\")\n      #shinyjs::disable('Plenaries')\n      #updateSelectInput(session, \"Presenter\",\n                        #choices = c(X$ids)\n      #)\n    }\n    \n  })\n  \n  \n  \n  observe({\n    if(input$filter == 'Country'){\n      y <- input$Country\n      \n      values <- X[which(X$Country == y),]\n      values <- values[order(values$Last),]\n      updateSelectInput(session, \"Presenter\",\n                        choices = c(values$ids)\n      )\n    }else if(input$filter == 'Affiliation'){\n      y <- input$Affiliation\n      \n      values <- X[which(X$Affiliation == y),]\n      values <- values[order(values$Last),]\n      updateSelectInput(session, \"Presenter\",\n                        choices = c(values$ids)\n      )\n    }else if(input$filter == 'Session'){\n      y <- input$Session\n      \n      values <- X[which(X$Session == y),]\n      values <- values[order(values$Last),]\n      updateSelectInput(session, \"Presenter\",\n                        choices = c(values$ids)\n      )\n    }else if(input$filter == 'Keyword'){\n      y <- input$Keyword\n      \n      \n      values <- X[grep(y,X$Keywords), ]\n      \n      #values <- X[X$Keywords %like% y, ]\n      values <- values[order(values$Last),]\n      updateSelectInput(session, \"Presenter\",\n                        choices = c(values$ids)\n      )\n    }else if(input$filter == 'Plenaries'){\n      y <- input$Session\n      \n      values <- X[which(X$fullname %in% c('Michelle LaRue','Alex Bond','Thomas Mattern')),]\n      values <- values[order(values$Last),]\n      updateSelectInput(session, \"Presenter\",\n                        choices = c(values$ids)\n      )\n    }else if(input$filter == 'Show all'){\n      values <- X[order(X$Last),]\n      updateSelectInput(session, \"Presenter\",\n                        choices = c(values$ids))\n    }\n    \n  })\n  \n  \n  observe({\n\n      Dat <- X[which(X$ids == input$Presenter),]\n      TZ <- as.numeric(input$TimeZone) * -1\n      if(TZ > 0){\n        TZ <- paste('+',as.character(TZ),sep='')\n      }else if(TZ < 0){\n        TZ <- as.character(TZ)\n      }\n      \n      newTZ <- paste('Etc/GMT',TZ,sep='')\n      newTIMEs <- format(Dat$GMTTime,tz=newTZ,usetz=TRUE)\n      \n      TT <- round(strptime(as.character(newTIMEs),format=\"%Y-%m-%d %H:%M:%S\"),units='min')\n      days <- paste(\"April\",as.character(TT$mday),sep=' ')\n      TIME <- paste(format(TT, \"%H:%M\"),sep=\"\")\n      output$CurrentTimeZone <- renderUI({\n        mess <- paste('<h4>Viewing time zone: UTC ',input$TimeZone,'</h4>',sep='')\n        HTML(mess)\n        \n      })\n      output$Time <- renderTable({\n        if(nrow(Dat) > 1){\n          Dat$lab <- c(1:nrow(Dat))\n          Tab <- data.frame(Label = Dat$lab, 'DAY' = days, 'TIME' = TIME, check.names=FALSE) #\"Local Timezone\" = Dat$LOCTm,\"Offset From UTC\" = Dat$Timezone,\n        }else{\n          Tab <- data.frame('DAY' = days, 'TIME' = TIME, check.names=FALSE)\n        }\n      })\n\n    ## have to multiply by -1 to fix the backwards tz thing... \n    \n  })\n  \n  \n  \n  \n  \n  \n  \n  output$Person <- renderTable({\n    Dat <- X[which(X$ids == input$Presenter),][1,]\n    Tab <- data.frame(First=Dat$First, Last=Dat$Last, Email = Dat$Email, Country = Dat$Country)\n    xtable(Tab)\n  })\n  \n  output$Info <- renderTable({\n    Dat <- X[which(X$ids == input$Presenter),]\n    if(nrow(Dat) > 1){\n      Dat$lab <- c(1:nrow(Dat))\n      Tab <- data.frame(Label = Dat$lab, Handle = Dat$Handle, Affiliation = Dat$Affiliation)\n    }else{\n      Tab <- data.frame(Handle = Dat$Handle, Affiliation = Dat$Affiliation)\n    }\n  })\n  \n  output$Time <- renderTable({\n    Dat <- X[which(X$ids == input$Presenter),]\n\n    if(nrow(Dat) > 1){\n      Dat$lab <- c(1:nrow(Dat))\n      Tab <- data.frame(Label = Dat$lab, 'DAY (UTC)' = Dat$Date, 'TIME (UTC)' = Dat$Time, check.names=FALSE) #\"Local Timezone\" = Dat$LOCTm,\"Offset From UTC\" = Dat$Timezone,\n    }else{\n      Tab <- data.frame('DAY (UTC)' = Dat$Date, 'TIME (UTC)' = Dat$Time, check.names=FALSE)\n    }\n    \n    \n  })\n  \n  \n  \n  output$TitleDat <- renderUI({\n    Dat <- X[which(X$ids == input$Presenter),]\n    \n    if(nrow(Dat) > 1){\n      Dat$lab <- c(1:nrow(Dat))\n      TITLEhtml <- paste('<p><strong>',Dat$lab,'</strong>',Dat$Title,'</p>')\n    }else{\n      TITLEhtml <- paste('<p>',Dat$Title,'</p>')\n    }\n    HTML(TITLEhtml)\n  })\n  \n  \n  output$CurrentTimeZone <- renderUI({\n    mess <- paste('<h4>Viewing time zone: UTC ',input$TimeZone,'</h4>',sep='')\n    HTML(mess)\n    \n  })\n  \n  \n  \n  output$AbstractDat <- renderUI({\n    Dat <- X[which(X$ids == input$Presenter),]\n    \n    if(nrow(Dat) > 1){\n      Dat$lab <- c(1:nrow(Dat))\n      Abshtml <- paste('<p><strong>',Dat$lab,'</strong>',Dat$Abstract,'</p>')\n    }else{\n      Abshtml <- paste('<p>',Dat$Abstract,'</p>')\n    }\n    HTML(Abshtml)\n\n  })\n  \n  \n  ########## For the schedule\n  \n  observeEvent(input$filter2, {\n    if(input$filter2 == 'Day'){\n      shinyjs::enable('Day')\n      shinyjs::disable('Session2')\n      \n    }else if(input$filter2 == 'Session'){\n      shinyjs::enable('Session2')\n      shinyjs::disable('Day')\n      \n    }else if(input$filter2 == 'Show Overview'){\n      shinyjs::disable('Session2')\n      shinyjs::disable(\"Day\")\n    }\n  })\n  \n  \n  observeEvent(input$TimeZone2,{\n    \n    TZ <- as.numeric(input$TimeZone2) * -1\n    if(TZ > 0){\n      TZ <- paste('+',as.character(TZ),sep='')\n    }else if(TZ < 0){\n      TZ <- as.character(TZ)\n    }\n    \n    newTZ <- paste('Etc/GMT',TZ,sep='')\n    \n    newTIMEs <- format(X$GMTTime,tz=newTZ,usetz=TRUE)\n    TT <- round(strptime(as.character(newTIMEs),format=\"%Y-%m-%d %H:%M:%S\"),units='min')\n    days <- paste(\"April\",as.character(TT$mday),sep=' ')\n    TIME <- paste(format(TT, \"%H:%M\"),sep=\"\")\n    \n    \n    \n    Ystarts <- format(Y$StartGMT,tz=newTZ,usetz=TRUE)\n    Yends <- format(Y$EndGMT,tz=newTZ,usetz=TRUE)\n    YstartTT <- round(strptime(as.character(Ystarts),format=\"%Y-%m-%d %H:%M:%S\"),units='min')\n    YendTT <- round(strptime(as.character(Yends),format=\"%Y-%m-%d %H:%M:%S\"),units='min')\n    Ystdays <- paste(\"April\",as.character(YstartTT$mday),sep=' ')\n    Yendays <- paste(\"April\",as.character(YendTT$mday),sep=' ')\n    TIMEst <- paste(format(YstartTT, \"%H:%M\"),sep=\"\")\n    TIMEen <- paste(format(YendTT, \"%H:%M\"),sep=\"\")\n    \n    \n    output$Schedule <- renderTable(striped = TRUE,hover=TRUE, expr= {\n      Dat <- data.frame(Name = X$fullname, Handle = X$Handle, Day = days, Time = TIME,Session = X$Session, Title = X$Title, check.names=FALSE)\n      Dat <- tbl_df(Dat) %>% filter(!is.na(Title))\n      \n      if(input$filter2 == 'Session'){\n        Dat <- tbl_df(Dat)\n        Dat <- Dat %>% filter(Session == input$Session2)\n        Dat <- data.frame(Dat)\n      }else if(input$filter2 == \"Day\"){\n        Dat <- tbl_df(Dat)\n        Dat <- Dat %>% filter(Day == input$Day)\n        Dat <- data.frame(Dat)\n      }else if(input$filter2 == \"Show Overview\"){\n        Overdat <- Y %>% select(-Date,-StartGMT,-EndGMT)\n        Overdat$Talks <- as.character(Overdat$Talks)\n        Overdat$Start <- paste(Ystdays, TIMEst,sep=', ')\n        Overdat$End <- paste(Yendays, TIMEen,sep=', ')\n        Dat <- data.frame(Overdat)\n      }\n      \n    })\n    \n    \n    \n  })\n  \n  \n  observeEvent(input$info, {\n    updateTabsetPanel(session = session, inputId = \"tabs\", selected = \"information\")\n  })\n  \n  \n  \n  \n  output$Schedule <- renderTable(striped = TRUE,hover=TRUE, expr= {\n    Dat <- data.frame(Name = X$fullname, Handle = X$Handle, Day = X$Date, UTC = X$Time,Session = X$Session, Title = X$Title, check.names=FALSE)\n    Dat <- tbl_df(Dat) %>% filter(!is.na(Title))\n    \n    Overdat <- Y #%>% select(-Keywords)\n    \n    if(input$filter2 == 'Session'){\n      Dat <- tbl_df(Dat)\n      Dat <- Dat %>% filter(Session == input$Session2)\n      Dat <- data.frame(Dat)\n    }else if(input$filter2 == \"Day\"){\n      Dat <- tbl_df(Dat)\n      Dat <- Dat %>% filter(Day == input$Day)\n      Dat <- data.frame(Dat)\n    }else if(input$filter2 == \"Show Overview\"){\n      Overdat$Talks <- as.character(Overdat$Talks)\n      Dat <- data.frame(Overdat)\n    }\n    \n  })\n\n})\n",
    "created" : 1521932812959.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3940335026",
    "id" : "4398B874",
    "lastKnownWriteTime" : 1522610605,
    "last_content_update" : 1522610605929,
    "path" : "D:/Dropbox/BlackBawks/PROJECTS/WSTC4/WSTCAbstracts/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}